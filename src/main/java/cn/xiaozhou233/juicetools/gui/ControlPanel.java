package cn.xiaozhou233.juicetools.gui;

import cn.xiaozhou233.juicetools.JuiceTools;
import cn.xiaozhou233.juicetools.tools.Dump;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;

public class ControlPanel {
    public JPanel panel1;
    public JLabel Title;
    public JTabbedPane tables;
    public JButton refreshButton;
    public JButton dumpClassButton;
    public JTextField fileField;
    public JButton chooseButton_file;
    public JTextField classField;
    public JButton chooseButton_class;
    public JButton redefineButton;
    public JTextField outputTextField;
    public JPanel dump_buttons;
    public JPanel dump_panel;
    public JPanel redefine_panel;
    public JLabel titleFile;
    public JLabel titleClass;
    public JLabel titleLength;
    public JLabel legthText;
    public JTree tree1;

    public ControlPanel() {
        initTree();
        bindActions();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new BorderLayout(0, 0));
        Title = new JLabel();
        Font TitleFont = this.$$$getFont$$$("Consolas", -1, 24, Title.getFont());
        if (TitleFont != null) Title.setFont(TitleFont);
        Title.setHorizontalAlignment(0);
        Title.setText("JuiceTools ControlPanel");
        panel1.add(Title, BorderLayout.NORTH);
        tables = new JTabbedPane();
        panel1.add(tables, BorderLayout.CENTER);
        dump_panel = new JPanel();
        dump_panel.setLayout(new BorderLayout(0, 0));
        tables.addTab("Dump", dump_panel);
        dump_buttons = new JPanel();
        dump_buttons.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        dump_panel.add(dump_buttons, BorderLayout.NORTH);
        refreshButton = new JButton();
        refreshButton.setText("Refresh");
        dump_buttons.add(refreshButton);
        dumpClassButton = new JButton();
        dumpClassButton.setText("Dump Class");
        dump_buttons.add(dumpClassButton);
        tree1 = new JTree();
        dump_panel.add(tree1, BorderLayout.CENTER);
        redefine_panel = new JPanel();
        redefine_panel.setLayout(new GridBagLayout());
        tables.addTab("Redefine", redefine_panel);
        fileField = new JTextField();
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.weightx = 3.0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        redefine_panel.add(fileField, gbc);
        chooseButton_file = new JButton();
        chooseButton_file.setText("Choose");
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        redefine_panel.add(chooseButton_file, gbc);
        titleFile = new JLabel();
        titleFile.setText("File");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        redefine_panel.add(titleFile, gbc);
        titleClass = new JLabel();
        titleClass.setText("Class");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.anchor = GridBagConstraints.WEST;
        redefine_panel.add(titleClass, gbc);
        classField = new JTextField();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 1;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        redefine_panel.add(classField, gbc);
        chooseButton_class = new JButton();
        chooseButton_class.setText("Choose");
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        redefine_panel.add(chooseButton_class, gbc);
        titleLength = new JLabel();
        titleLength.setText("Length");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.anchor = GridBagConstraints.WEST;
        redefine_panel.add(titleLength, gbc);
        legthText = new JLabel();
        legthText.setText("0 Bytes");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 2;
        gbc.gridwidth = 2;
        gbc.anchor = GridBagConstraints.NORTH;
        redefine_panel.add(legthText, gbc);
        final JPanel spacer1 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.gridwidth = 3;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        redefine_panel.add(spacer1, gbc);
        redefineButton = new JButton();
        redefineButton.setText("Redefine");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 4;
        gbc.gridwidth = 3;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        redefine_panel.add(redefineButton, gbc);
        outputTextField = new JTextField();
        outputTextField.setText("Output");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 5;
        gbc.gridwidth = 3;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        redefine_panel.add(outputTextField, gbc);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }

    private void createUIComponents() {

    }

    private void initTree() {
        refreshTree();
    }

    // Refresh class tree
    private void refreshTree() {
        Class<?>[] classes = JuiceTools.getLoaderNative().getLoadedClasses();

        DefaultMutableTreeNode root = new DefaultMutableTreeNode("Loaded Classes");
        Map<String, DefaultMutableTreeNode> packageNodes = new HashMap<>();

        for (Class<?> cls : classes) {
            String fullName = cls.getName();
            int lastDot = fullName.lastIndexOf('.');
            String packageName = lastDot == -1 ? "(default)" : fullName.substring(0, lastDot);
            String className = lastDot == -1 ? fullName : fullName.substring(lastDot + 1);

            DefaultMutableTreeNode pkgNode = packageNodes.computeIfAbsent(packageName, k -> {
                DefaultMutableTreeNode node = new DefaultMutableTreeNode(k);
                root.add(node);
                return node;
            });

            pkgNode.add(new DefaultMutableTreeNode(className));
        }

        tree1.setModel(new DefaultTreeModel(root));
        tree1.expandRow(0);

        tree1.addTreeSelectionListener(e -> {
            DefaultMutableTreeNode node = (DefaultMutableTreeNode) tree1.getLastSelectedPathComponent();
            if (node != null && node.isLeaf()) {
                DefaultMutableTreeNode parent = (DefaultMutableTreeNode) node.getParent();
                String fullClassName = parent.getUserObject() + "." + node.getUserObject();
                classField.setText(fullClassName);
            }
        });

        // 包裹滚动条
        dump_panel.removeAll();
        dump_panel.add(dump_buttons, BorderLayout.NORTH);
        dump_panel.add(new JScrollPane(tree1), BorderLayout.CENTER);
        dump_panel.revalidate();
        dump_panel.repaint();
    }

    // Events
    private void bindActions() {
        // Class Tree
        refreshButton.addActionListener(e -> refreshTree());

        // Dump Class Button
        dumpClassButton.addActionListener(this::actionPerformed);

        // Choose Redefine File Button
        chooseButton_file.addActionListener(e -> {
            JFileChooser chooser = new JFileChooser();
            chooser.setDialogTitle("Select Class File");
            int result = chooser.showOpenDialog(panel1);
            if (result != JFileChooser.APPROVE_OPTION) return;

            java.io.File file = chooser.getSelectedFile();
            fileField.setText(file.getAbsolutePath());

            legthText.setText(file.length() + " Bytes");
        });

        // Redefine Button
        redefineButton.addActionListener(e -> {
            new SwingWorker<Void, Void>() {
                @Override
                protected Void doInBackground() throws Exception {
                    java.io.File file = new java.io.File(fileField.getText());
                    byte[] bytes = java.nio.file.Files.readAllBytes(file.toPath());
                    JuiceTools.getLoaderNative().redefineClass(
                            classField.getText().replace(".", "/"),
                            bytes,
                            bytes.length
                    );
                    return null;
                }

                @Override
                protected void done() {
                    outputTextField.setText("Redefine success: " + classField.getText());
                }
            }.execute();
        });

    }

    private void actionPerformed(ActionEvent e) {
        String className = classField.getText();
        if (className == null || className.isEmpty()) {
            JOptionPane.showMessageDialog(panel1, "No class selected!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        new Thread(() -> {
            try {
                byte[] data = Dump.dumpClass(className.replace("(default).", ""));

                JFileChooser chooser = new JFileChooser();
                chooser.setDialogTitle("Save Dumped Class");
                chooser.setCurrentDirectory(new File(System.getProperty("user.dir")));
                chooser.setSelectedFile(new File(className.replace('.', '_') + ".class"));
                int result = chooser.showSaveDialog(panel1);
                if (result != JFileChooser.APPROVE_OPTION) return;

                File file = chooser.getSelectedFile();
                try (FileOutputStream fos = new FileOutputStream(file)) {
                    fos.write(data);
                }

                SwingUtilities.invokeLater(() ->
                        outputTextField.setText("Saved to: " + file.getAbsolutePath())
                );

            } catch (Exception ex) {
                ex.printStackTrace();
                SwingUtilities.invokeLater(() ->
                        outputTextField.setText("Error: " + ex.getMessage())
                );
            }
        }).start();
    }

}
